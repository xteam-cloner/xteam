import uvloop

uvloop.install()
from pytgcalls import __version__ as pytver
import pyrogram
from pyrogram import Client
from pyrogram.enums import ChatMemberStatus
from pyrogram.types import (
    BotCommand,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllPrivateChats,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from pyrogram.errors.exceptions.forbidden_403 import ChatWriteForbidden
import config

from ..logging import LOGGER


class ChampuBot(Client):
    def __init__(self):
        LOGGER(__name__).info(f"s·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õ...")
        super().__init__(
            "ChampuMusic",
            api_id=config.API_ID,
            api_hash=config.API_HASH,
            bot_token=config.BOT_TOKEN,
        )
    async def start(self):
        await super().start()
        get_me = await self.get_me()
        self.username = get_me.username
        self.id = get_me.id
        self.name = self.me.first_name + " " + (self.me.last_name or "")
        self.mention = self.me.mention

        # Create the button
        button = InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        text="‡πè ·¥Ä·¥Ö·¥Ö ·¥ç·¥á …™…¥ …¢ Ä·¥è·¥ú·¥ò ‡πè",
                        url=f"https://t.me/{self.username}?startgroup=true",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ö° ·¥Ñ ü·¥ès·¥á ‚ö°", 
                        callback_data="close",
                    )
                ]
            ]
        )

        # Try to send a message to the logger group
        if config.LOGGER_ID:
            try:
                await self.send_photo(
                    config.LOGGER_ID,
                    photo=config.START_IMG_URL,
                    caption=f"<blockquote>‚ùç  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ‚ùç</blockquote>\n<blockquote>‚óà {self.name} : @{self.username}\n\n‚ùç …™·¥Ö:- `{self.id}` \n\n‚ùç ·¥ò è-·¥õ…¢·¥Ñ·¥Ä ü üÍú± : {pytver}\n\n‚ùç ·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥ús…™…¥…¢ ‚ùç\n\n</blockquote>",
                    reply_markup=button,
                )
            except pyrogram.errors.ChatWriteForbidden as e:
                LOGGER(__name__).error(f"Bot cannot write to the log group: {e}")
                try:
                    await self.send_message(
                        config.LOGGER_ID,
                        f"<blockquote>‚ùç  ô·¥è·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ‚ùç</blockquote>\n<blockquote>‚óà {self.name} : @{self.username}\n\n‚ùç …™·¥Ö:- `{self.id}` \n\n‚ùç ·¥ò è-·¥õ…¢·¥Ñ·¥Ä ü üÍú± : {pytver}\n\n‚ùç ·¥õ ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥ús…™…¥…¢ ‚ùç\n\n</blockquote>",
                    reply_markup=button,
                    )
                except Exception as e:
                    LOGGER(__name__).error(f"Failed to send message in log group: {e}")
            except Exception as e:
                LOGGER(__name__).error(
                    f"Unexpected error while sending to log group: {e}"
                )
        else:
            LOGGER(__name__).warning(
                "LOGGER_ID is not set, skipping log group notifications."
            )

        # Setting commands
        if config.SET_CMDS:
            try:
                await self.set_bot_commands(
                    commands=[
                        BotCommand("start", "s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ"),
                        BotCommand("help", "…¢·¥á·¥õ ·¥õ ú·¥á  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú"),
                        BotCommand("ping", "·¥Ñ ú·¥á·¥Ñ·¥ã  ô·¥è·¥õ …™s ·¥Ä ü…™·¥†·¥á ·¥è Ä ·¥Ö·¥á·¥Ä·¥Ö"),
                    ],
                    scope=BotCommandScopeAllPrivateChats(),
                )
                await self.set_bot_commands(
                    commands=[
                        BotCommand("play", "Start playing requested song"),
                        BotCommand("stop", "Stop the current song"),
                        BotCommand("pause", "Pause the current song"),
                        BotCommand("resume", "Resume the paused song"),
                        BotCommand("queue", "Check the queue of songs"),
                        BotCommand("skip", "Skip the current song"),
                        BotCommand("volume", "Adjust the music volume"),
                        BotCommand("lyrics", "Get lyrics of the song"),
                    ],
                    scope=BotCommandScopeAllGroupChats(),
                )
                await self.set_bot_commands(
                    commands=[
                        BotCommand("start", "‚ù• ‚ú®·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥õ ú·¥á  ô·¥è·¥õ‚ú®"),
                        BotCommand("ping", "‚ù• üçÅ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥ò…™…¥…¢üçÅ"),
                        BotCommand("help", "‚ù• ü•∫·¥õ·¥è …¢·¥á·¥õ  ú·¥á ü·¥òü•∫"),
                        BotCommand("vctag", "‚ù• üòá·¥õ·¥Ä…¢·¥Ä ü ü “ì·¥è Ä ·¥†·¥Ñüôà"),
                        BotCommand("stopvctag", "‚ù• üìçs·¥õ·¥è·¥ò ·¥õ·¥Ä…¢·¥Ä ü ü “ì·¥è Ä ·¥†·¥Ñ üí¢"),
                        BotCommand("tagall", "‚ù• üîª·¥õ·¥Ä…¢ ·¥Ä ü ü ·¥ç·¥á·¥ç ô·¥á Äs  ô è ·¥õ·¥áx·¥õüîª"),
                        BotCommand("cancel", "‚ù• üîª·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥õ ú·¥á ·¥õ·¥Ä…¢…¢…™…¥…¢üîª"),
                        BotCommand("settings", "‚ù• üîª·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á s·¥á·¥õ·¥õ…™…¥…¢süîª"),
                        BotCommand("reload", "‚ù• ü™ê·¥õ·¥è  Ä·¥á ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á  ô·¥è·¥õü™ê"),
                        BotCommand("play", "‚ù• ‚ù£Ô∏è·¥õ·¥è ·¥ò ü·¥Ä è ·¥õ ú·¥á s·¥è…¥…¢‚ù£Ô∏è"),
                        BotCommand("vplay", "‚ù• ‚ù£Ô∏è·¥õ·¥è ·¥ò ü·¥Ä è ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥°…™·¥õ ú ·¥†…™·¥Ö·¥á·¥è‚ù£Ô∏è"),
                        BotCommand("pause", "‚ù• ü•Ä·¥õ·¥è ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á s·¥è…¥…¢sü•Ä"),
                        BotCommand("resume", "‚ù• üíñ·¥õ·¥è  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á s·¥è…¥…¢üíñ"),
                        BotCommand("end", "‚ù• üêö·¥õ·¥è ·¥á·¥ç·¥ò·¥õ è ·¥õ ú·¥á œô·¥ú·¥á·¥ú·¥áüêö"),
                        BotCommand("queue", "‚ù• ü§®·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á œô·¥ú·¥á·¥ú·¥áü§®"),
                        BotCommand("playlist", "‚ù• üï∫·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á ·¥ò ü·¥Ä è ü…™s·¥õüï∫"),
                        BotCommand("stop", "‚ù• ‚ù§‚Äçüî•·¥õ·¥è s·¥õ·¥è·¥ò ·¥õ ú·¥á s·¥è…¥…¢s‚ù§‚Äçüî•"),
                        BotCommand("lyrics", "‚ù• üïäÔ∏è·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á  ü è Ä…™·¥ÑsüïäÔ∏è"),
                        BotCommand("song", "‚ù• üî∏·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á s·¥è…¥…¢üî∏"),
                        BotCommand("video", "‚ù• üî∏·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥õ ú·¥á ·¥†…™·¥Ö·¥á·¥è s·¥è…¥…¢üî∏"),
                        BotCommand("gali", "‚ù• üîª·¥õ·¥è  Ä·¥á·¥ò ü è “ì·¥è Ä “ì·¥ú…¥üîª"),
                        BotCommand("shayri", "‚ù• üîª·¥õ·¥è …¢·¥á·¥õ ·¥Ä s ú·¥Ä è·¥Ä Ä…™üîª"),
                        BotCommand("love", "‚ù• üîª·¥õ·¥è …¢·¥á·¥õ ·¥Ä  ü·¥è·¥†·¥á s ú·¥Ä è·¥Ä Ä…™üîª"),
                        BotCommand("sudolist", "‚ù• üå±·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á s·¥ú·¥Ö·¥è ü…™s·¥õüå±"),
                        BotCommand("owner", "‚ù• üíù·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ·¥è·¥°…¥·¥á Äüíù"),
                        BotCommand("update", "‚ù• üê≤·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á  ô·¥è·¥õüê≤"),
                        BotCommand("gstats", "‚ù• üíò·¥õ·¥è s·¥õ·¥Ä·¥õs ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õüíò"),
                        BotCommand("repo", "‚ù• üçå·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á ùöÅùô¥ùôøùôæüçå"),
                    ],
                    scope=BotCommandScopeAllChatAdministrators(),
                )
            except Exception as e:
                LOGGER(__name__).error(f"Failed to set bot commands: {e}")

        # Check if bot is an admin in the logger group
        if config.LOGGER_ID:
            try:
                chat_member_info = await self.get_chat_member(
                    config.LOGGER_ID, self.id
                )
                if chat_member_info.status != ChatMemberStatus.ADMINISTRATOR:
                    LOGGER(__name__).error(
                        "Please promote Bot as Admin in Logger Group"
                    )
            except Exception as e:
                LOGGER(__name__).error(f"Error occurred while checking bot status: {e}")

        LOGGER(__name__).info(f"MusicBot Started as {self.name}")
